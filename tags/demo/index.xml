<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>demo on 茶酒的小站</title><link>http://blogs.chajiuqqq.cn/tags/demo/</link><description>Recent content in demo on 茶酒的小站</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Feb 2023 12:01:09 +0800</lastBuildDate><atom:link href="http://blogs.chajiuqqq.cn/tags/demo/index.xml" rel="self" type="application/rss+xml"/><item><title>一个Golang RSS内容匹配器</title><link>http://blogs.chajiuqqq.cn/p/%E4%B8%80%E4%B8%AAgolang-rss%E5%86%85%E5%AE%B9%E5%8C%B9%E9%85%8D%E5%99%A8/</link><pubDate>Tue, 07 Feb 2023 12:01:09 +0800</pubDate><guid>http://blogs.chajiuqqq.cn/p/%E4%B8%80%E4%B8%AAgolang-rss%E5%86%85%E5%AE%B9%E5%8C%B9%E9%85%8D%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>go-in-action里的一个demo，给定需要匹配的字符串，在搜索源（如rss）中批量查询最新文章，返回结果（如相匹配的title和description）&lt;/p>
&lt;p>关键字：&lt;code>goroutine并发&lt;/code>，&lt;code>json/xml反序列化&lt;/code>，&lt;code>网络请求&lt;/code>&lt;/p>
&lt;p>项目地址：https://github.com/chajiuqqq/go-rss-matcher&lt;/p>
&lt;/blockquote>
&lt;p>效果：搜索“China”，发现了近期和China相关的文章，如中国气球误入美国:&lt;/p>
&lt;pre>&lt;code>$ ./rss-matcher
2023/02/04 12:04:33 title
China says balloon spotted over U.S. is a 'civilian airship' that blew astray
2023/02/04 12:04:33 description
The State Department announced Secretary of State Antony Blinken will not go ahead with a planned trip to China, after the surveillance balloon was detected over U.S. airspace Thursday.
2023/02/04 12:04:33 title
Tensions continue to increase between the United States and China
2023/02/04 12:04:34 HTTP Response Error: http://www.npr.org/rss/rss.php?id=43 code 404
2023/02/04 12:04:34 HTTP Response Error: http://www.npr.org/rss/rss.php?id=1021 code 404
2023/02/04 12:04:34 title
Perspective: Jiang Zemin's passing marks the end of an era for China
2023/02/04 12:04:34 description
As China holds a memorial service for its late leader Jiang Zemin, an NPR correspondent who met Jiang reflects on the figure and his transforming country.
2023/02/04 12:04:34 title
Blinken postpones China trip after discovery of surveillance balloon
2023/02/04 12:04:34 description
Secretary of State Antony Blinken has postponed his trip to China after the discovery of what the Pentagon alleges to be a Chinese surveillance balloon. China's government says it's a weather balloon.
2023/02/04 12:04:34 title
China says balloon spotted over U.S. is a 'civilian airship' that blew astray
2023/02/04 12:04:34 description
The State Department announced Secretary of State Antony Blinken will not go ahead with a planned trip to China, after the surveillance balloon was detected over U.S. airspace Thursday.
2023/02/04 12:04:34 description
China's foreign ministry described the balloon as &amp;quot;a civilian airship&amp;quot; for meteorological research that had blown far off course by winds. The Pentagon suspects it's collecting sensitive information.
&lt;/code>&lt;/pre>
&lt;p>项目结构设计上支持多种搜索源，如rss等，只要设计对应的matcher就可以进行搜索匹配。&lt;/p>
&lt;p>程序流程如下：&lt;/p>
&lt;ol>
&lt;li>读取data.json里的搜索源（feeds），并反序列化为对象供后面访问&lt;/li>
&lt;li>给每个feed寻找已注册的matcher匹配器，并开启goroutine匹配。匹配结果写入通道。
&lt;ol>
&lt;li>匹配过程首先请求feed的URL，获得XML&lt;/li>
&lt;li>解析xml，反序列化到对象&lt;/li>
&lt;li>对对象里的字段进行匹配&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>循环读取通道内的结果，并打印&lt;/li>
&lt;li>如果匹配结束，关闭通道，主程序结束&lt;/li>
&lt;/ol>
&lt;p>几个设计上的亮点：&lt;/p>
&lt;ul>
&lt;li>设计Matcher接口，所有的matcher都可以调用Search进行搜索&lt;/li>
&lt;li>设计matcherMap，不同类型的Matcher注册后保存在这里，方便不同数据源匹配和数据源类型拓展&lt;/li>
&lt;li>每个goroutine执行一个feed的搜索，并发执行，提高性能&lt;/li>
&lt;li>查询结果后，goroutine通过无缓冲chan把数据发送主线程展示，同步获取并展示，利用了语言特性&lt;/li>
&lt;/ul></description></item><item><title>一个golang自定义日志记录器</title><link>http://blogs.chajiuqqq.cn/p/%E4%B8%80%E4%B8%AAgolang%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%99%A8/</link><pubDate>Tue, 07 Feb 2023 11:03:38 +0800</pubDate><guid>http://blogs.chajiuqqq.cn/p/%E4%B8%80%E4%B8%AAgolang%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%99%A8/</guid><description>&lt;p>标准库的log包无法实现日志分级处理，这个demo可以实现日志的多级处理。原理是定义多个log对象，并指定不同的输出，实现不同等级日志不同输出。&lt;/p>
&lt;p>mlog包代码如下：&lt;/p>
&lt;pre>&lt;code>// mlog.go
package mlog
import (
&amp;quot;io&amp;quot;
&amp;quot;log&amp;quot;
&amp;quot;os&amp;quot;
)
var (
Trace *log.Logger
Info *log.Logger
Warning *log.Logger
Error *log.Logger
)
func init() {
file, err := os.OpenFile(&amp;quot;error.txt&amp;quot;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
if err != nil {
log.Fatalln(&amp;quot;Fail to open error file:&amp;quot;, err)
}
Trace = log.New(io.Discard, &amp;quot;TRACE: &amp;quot;, log.Ldate|log.Ltime|log.Lshortfile)
Info = log.New(os.Stdout, &amp;quot;INFO: &amp;quot;, log.Ldate|log.Ltime|log.Lshortfile)
Warning = log.New(os.Stdout, &amp;quot;WARNING: &amp;quot;, log.Ldate|log.Ltime|log.Lshortfile)
Error = log.New(file, &amp;quot;ERROR: &amp;quot;, log.Ldate|log.Ltime|log.Lshortfile)
}
&lt;/code>&lt;/pre>
&lt;p>调用测试：&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;github.com/chajiu/go-example/mlog&amp;quot;
func main() {
mlog.Trace.Println(&amp;quot;trace...&amp;quot;)
mlog.Info.Println(&amp;quot;Info...&amp;quot;)
mlog.Warning.Println(&amp;quot;warning...&amp;quot;)
mlog.Error.Println(&amp;quot;error...&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>error.txt会在main目录下生成。&lt;/p>
&lt;pre>&lt;code>ERROR: 2023/02/07 10:56:13 main.go:9: error...
ERROR: 2023/02/07 10:56:23 main.go:9: error...
&lt;/code>&lt;/pre>
&lt;p>Info和Warning则是直接输出到stdout：&lt;/p>
&lt;pre>&lt;code>INFO: 2023/02/07 10:56:23 main.go:7: Info...
WARNING: 2023/02/07 10:56:23 main.go:8: warning...
&lt;/code>&lt;/pre></description></item></channel></rss>