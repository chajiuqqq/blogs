<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 茶酒的小站</title><link>https://chajiuqqq.github.io/blogs/post/</link><description>Recent content in Posts on 茶酒的小站</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 Oct 2022 22:19:10 +0800</lastBuildDate><atom:link href="https://chajiuqqq.github.io/blogs/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Blockly2python Web Edition开发流程</title><link>https://chajiuqqq.github.io/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 31 Oct 2022 22:19:10 +0800</pubDate><guid>https://chajiuqqq.github.io/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</guid><description>&lt;p>实验室二次开发一个blockly平台，这是一个积木化编程平台，可从积木生成各种语言代码，如Python。界面如下，积木到代码由原blockly库提供，不难。
而运行python代码刚开始是放在jupyter notebook，手动复制过去运行。
&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/blockly1.png"
width="1920"
height="956"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/blockly1_hub3116288970dfe0c4418dcd69b8a6259_195771_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/blockly1_hub3116288970dfe0c4418dcd69b8a6259_195771_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="482px"
>&lt;/p>
&lt;p>进一步优化的方案就是在线运行（在浏览器）Python代码。基本库的浏览器化不难，但是之前一直没找到可以运行第三方库如pandas的js库。这次看到&lt;a class="link" href="https://pyodide.org/en/stable/index.html" target="_blank" rel="noopener"
>pyodide&lt;/a>，可以实现第三方库的导入。于是开始折腾。&lt;/p>
&lt;h1 id="初步运行pyodide">初步运行pyodide&lt;/h1>
&lt;p>直接看官网的例子，可以直接跑python基础库：&lt;/p>
&lt;pre>&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;
You can execute any Python code. Just enter something in the box below and
click the button.
&amp;lt;/p&amp;gt;
&amp;lt;input id=&amp;quot;code&amp;quot; value=&amp;quot;sum([1, 2, 3, 4, 5])&amp;quot; /&amp;gt;
&amp;lt;button onclick=&amp;quot;evaluatePython()&amp;quot;&amp;gt;Run&amp;lt;/button&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;div&amp;gt;Output:&amp;lt;/div&amp;gt;
&amp;lt;textarea id=&amp;quot;output&amp;quot; style=&amp;quot;width: 100%;&amp;quot; rows=&amp;quot;6&amp;quot; disabled&amp;gt;&amp;lt;/textarea&amp;gt;
&amp;lt;script&amp;gt;
const output = document.getElementById(&amp;quot;output&amp;quot;);
const code = document.getElementById(&amp;quot;code&amp;quot;);
function addToOutput(s) {
output.value += &amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;quot; + code.value + &amp;quot;\n&amp;quot; + s + &amp;quot;\n&amp;quot;;
}
output.value = &amp;quot;Initializing...\n&amp;quot;;
// init Pyodide
async function main() {
let pyodide = await loadPyodide();
output.value += &amp;quot;Ready!\n&amp;quot;;
return pyodide;
}
let pyodideReadyPromise = main();
async function evaluatePython() {
let pyodide = await pyodideReadyPromise;
try {
let output = pyodide.runPython(code.value);
addToOutput(output);
} catch (err) {
addToOutput(err);
}
}
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/pyodide-demo.png"
width="861"
height="253"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/pyodide-demo_hue20e8405241a231c5633442d0a619047_8568_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/pyodide-demo_hue20e8405241a231c5633442d0a619047_8568_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="340"
data-flex-basis="816px"
>&lt;/p>
&lt;h1 id="print问题">print问题&lt;/h1>
&lt;p>基本库python代码可以正常运行，但是运行&lt;code>print('abc')&lt;/code>函数时，发现打印的东西不在返回的结果里，而是在console里。幸运的是这个问题也有&lt;a class="link" href="https://github.com/pyodide/pyodide/issues/8" target="_blank" rel="noopener"
>issue&lt;/a>。&lt;/p>
&lt;p>这个issue下面的&lt;a class="link" href="https://github.com/pyodide/pyodide/issues/8#issuecomment-772024841" target="_blank" rel="noopener"
>这个回答&lt;/a>提供了一种方法，可以将执行的代码的输出转到返回结果，而不是console。&lt;/p>
&lt;pre>&lt;code>&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
// set the pyodide files URL (packages.json, pyodide.asm.data etc)
window.languagePluginUrl = 'https://cdn.jsdelivr.net/pyodide/v0.16.1/full/';
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/pyodide/v0.16.1/full/pyodide.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
function setup_pyodide() {
// setup pyodide environment to run code blocks as needed
var setup_code = `
import sys, io, traceback
namespace = {} # use separate namespace to hide run_code, modules, etc.
def run_code(code):
&amp;quot;&amp;quot;&amp;quot;run specified code and return stdout and stderr&amp;quot;&amp;quot;&amp;quot;
out = io.StringIO()
oldout = sys.stdout
olderr = sys.stderr
sys.stdout = sys.stderr = out
try:
# change next line to exec(code, {}) if you want to clear vars each time
exec(code, namespace)
except:
traceback.print_exc()
sys.stdout = oldout
sys.stderr = olderr
return out.getvalue()
`
pyodide.runPython(setup_code)
}
function runPython() {
// run code currently stored in editor
pyodide.globals.code_to_run = editor.getValue()
document.getElementById(&amp;quot;output&amp;quot;).value = pyodide.runPython('run_code(code_to_run)')
}
// run setup_pyodide() when pyodide finishes loading
languagePluginLoader.then(setup_pyodide)
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>注意他用的是v0.16.1版本pyodide，最新的0.21.3会报错。但是思路很好，贴一下我自己修改的0.21.3版本代码,原理就是把运行的代码当作参数输入预先运行的run_code函数：&lt;/p>
&lt;pre>&lt;code>&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
const output = document.getElementById(&amp;quot;output&amp;quot;);
const pyplotfigure = document.getElementById(&amp;quot;pyplotfigure&amp;quot;);
function addToOutput(s) {
output.value += &amp;quot;&amp;gt;&amp;gt;&amp;gt; &amp;quot; + s + &amp;quot;\n&amp;quot;;
}
output.value = &amp;quot;Initializing...\n&amp;quot;;
function clearOutput() {
output.value = 'Ready!\n'
pyplotfigure.src=''
}
let pyodide
async function runPython() {
// run code currently stored in editor
let code_to_run = editor.getValue()
await pyodide.loadPackagesFromImports(code_to_run);
pyodide.globals.set('code_to_run',code_to_run);
addToOutput(pyodide.runPython('run_code(code_to_run)'));
}
async function main(){
pyodide = await loadPyodide();
// await pyodide.loadPackage(['pandas','matplotlib']);
var setup_code = `
import sys, io, traceback
namespace = {} # use separate namespace to hide run_code, modules, etc.
def run_code(_code):
&amp;quot;&amp;quot;&amp;quot;run specified code and return stdout and stderr&amp;quot;&amp;quot;&amp;quot;
namespace={}
_out = io.StringIO()
_oldout = sys.stdout
_olderr = sys.stderr
sys.stdout = sys.stderr = _out
try:
# change next line to exec(code, {}) if you want to clear vars each time
exec(_code,namespace)
except:
traceback.print_exc()
sys.stdout = _oldout
sys.stderr = _olderr
return _out.getvalue()
`
pyodide.runPython(setup_code)
output.value += 'Ready!\n'
}
main()
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;h1 id="画图显示问题">画图显示问题&lt;/h1>
&lt;p>这下print没问题了，下面解决画图的问题。上面的&lt;/p>
&lt;pre>&lt;code>await pyodide.loadPackagesFromImports(code_to_run);
&lt;/code>&lt;/pre>
&lt;p>会自动识别import并导入对应python库的js版本。但是matplotlab画图没法直接出来。我找了两个解决方法&lt;/p>
&lt;ul>
&lt;li>修改matplotlab的&lt;a class="link" href="https://matplotlib.org/stable/users/explain/backends.html#selecting-a-backend" target="_blank" rel="noopener"
>backends&lt;/a>，可以把图片输出成canvas在页面中显示&lt;/li>
&lt;li>保存图片的base64编码，然后html中的img读取base64编码显示图片&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>第一个方法&lt;/strong>参考这个&lt;a class="link" href="https://blog.pyodide.org/posts/canvas-renderer-matplotlib-in-pyodide/" target="_blank" rel="noopener"
>blog&lt;/a>，里面提到的这个&lt;a class="link" href="https://jsfiddle.net/gh/get/library/pure/pyodide/pyodide-blog/contents/demos/canvas-renderer-matplotlib/demo-1/" target="_blank" rel="noopener"
>demo&lt;/a>用处很大，直接显示了如何从matplotlab显示图像到网页。&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/demo2.png"
width="1709"
height="481"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/demo2_hua31076cea541db4698eea6ed159fad99_97981_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/demo2_hua31076cea541db4698eea6ed159fad99_97981_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="355"
data-flex-basis="852px"
>&lt;/p>
&lt;p>使用方法就是在运行的python代码里，最前面加上&lt;/p>
&lt;pre>&lt;code>import matplotlib
matplotlib.use(&amp;quot;module://matplotlib.backends.html5_canvas_backend&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>指定matplotlab的backend为html5_canvas_backend，就可以生成canvas了，但是有个问题是我不知道如何控制这个canvas的位置，于是使用第二个方法。&lt;/p>
&lt;p>&lt;strong>第二个方法&lt;/strong>参考这个&lt;a class="link" href="https://codepen.io/aagostini/pen/LYExVJL?editors=1000" target="_blank" rel="noopener"
>网页&lt;/a>，虽然它的pyodide.js链接失效了看不出效果，但是可以修改一下，看到matplotlab作图出现在html上了：&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/demo3.png"
width="672"
height="523"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/demo3_hu6129f7b5febdece6f7990ff7a3cd189c_23069_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/demo3_hu6129f7b5febdece6f7990ff7a3cd189c_23069_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>代码如下：&lt;/p>
&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Demo&amp;lt;/title&amp;gt;
&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/pyodide/v0.16.1/full/pyodide.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
languagePluginLoader.then(() =&amp;gt; {
pyodide.loadPackage(['matplotlib']).then(() =&amp;gt; {
pyodide.runPython(`
import matplotlib.pyplot as plt
import io, base64
fig, ax = plt.subplots()
ax.plot([1,3,2])
buf = io.BytesIO()
fig.savefig(buf, format='png')
buf.seek(0)
img_str = 'data:image/png;base64,' + base64.b64encode(buf.read()).decode('UTF-8')`
);
document.getElementById(&amp;quot;pyplotfigure&amp;quot;).src=pyodide.globals.img_str
});});
&amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;textfield&amp;quot;&amp;gt;A matplotlib figure:&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;pyplotdiv&amp;quot;&amp;gt;&amp;lt;img id=&amp;quot;pyplotfigure&amp;quot;/&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h1 id="整合">整合&lt;/h1>
&lt;p>把解决print的方法和第二个输出图片的方法结合起来有点小插曲，一开始修改runPython()&lt;/p>
&lt;pre>&lt;code>async function runPython() {
// run code currently stored in editor
let code_to_run = editor.getValue()
await pyodide.loadPackagesFromImports(code_to_run);
pyodide.globals.set('code_to_run',code_to_run);
addToOutput(pyodide.runPython('run_code(code_to_run)'));
let a = pyodide.globals.get('img_str')
if(a){
pyplotfigure.src=a
}
}
&lt;/code>&lt;/pre>
&lt;p>但是&lt;code>let a = pyodide.globals.get('img_str')&lt;/code>一开始提示无法找到img_str，后来发现是namespace的锅：&lt;/p>
&lt;pre>&lt;code> exec(_code,namespace)
&lt;/code>&lt;/pre>
&lt;p>这个会在一个新的namespace里执行，所以在外面找不到里面定义的img_str，改为&lt;/p>
&lt;pre>&lt;code>exec(_code,globals())
&lt;/code>&lt;/pre>
&lt;p>使用全局的namespace，就可以看到图片了&lt;/p>
&lt;p>最后代码：&lt;/p>
&lt;p>js：&lt;/p>
&lt;pre>&lt;code>&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
const output = document.getElementById(&amp;quot;output&amp;quot;);
const pyplotfigure = document.getElementById(&amp;quot;pyplotfigure&amp;quot;);
function addToOutput(s) {
output.value += &amp;quot;&amp;gt;&amp;gt;&amp;gt; &amp;quot; + s + &amp;quot;\n&amp;quot;;
}
output.value = &amp;quot;Initializing...\n&amp;quot;;
function clearOutput() {
output.value = 'Ready!\n'
pyplotfigure.src=''
}
let pyodide
async function runPython() {
// run code currently stored in editor
let code_to_run = editor.getValue()
await pyodide.loadPackagesFromImports(code_to_run);
pyodide.globals.set('code_to_run',code_to_run);
addToOutput(pyodide.runPython('run_code(code_to_run)'));
let a = pyodide.globals.get('img_str')
if(a){
pyplotfigure.src=a
}
}
async function main(){
pyodide = await loadPyodide();
// await pyodide.loadPackage(['pandas','matplotlib']);
var setup_code = `
import sys, io, traceback
namespace = {} # use separate namespace to hide run_code, modules, etc.
def run_code(_code):
&amp;quot;&amp;quot;&amp;quot;run specified code and return stdout and stderr&amp;quot;&amp;quot;&amp;quot;
_out = io.StringIO()
_oldout = sys.stdout
_olderr = sys.stderr
sys.stdout = sys.stderr = _out
try:
# change next line to exec(code, {}) if you want to clear vars each time
exec(_code,globals())
except:
traceback.print_exc()
sys.stdout = _oldout
sys.stderr = _olderr
return _out.getvalue()
`
pyodide.runPython(setup_code)
output.value += 'Ready!\n'
}
main()
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>html要加上放图片的地方：&lt;/p>
&lt;pre>&lt;code>&amp;lt;div id=&amp;quot;pyplotdiv&amp;quot;&amp;gt;&amp;lt;img id=&amp;quot;pyplotfigure&amp;quot; style=&amp;quot;width: 100% ;&amp;quot;/&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>最后展示一下：&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/blockly2.png"
width="1920"
height="950"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/blockly2_hud88af843e7fc05c8a3089f4e81c8046f_281315_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/blockly2python-web-edition%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/blockly2_hud88af843e7fc05c8a3089f4e81c8046f_281315_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="485px"
>&lt;/p></description></item><item><title>GoLang中的Strings, bytes, runes和characters</title><link>https://chajiuqqq.github.io/blogs/p/golang%E4%B8%AD%E7%9A%84strings-bytes-runes%E5%92%8Ccharacters/</link><pubDate>Fri, 07 Oct 2022 12:16:11 +0800</pubDate><guid>https://chajiuqqq.github.io/blogs/p/golang%E4%B8%AD%E7%9A%84strings-bytes-runes%E5%92%8Ccharacters/</guid><description>&lt;blockquote>
&lt;p>原文标题：Strings, bytes, runes and characters in Go&lt;/p>
&lt;p>原文地址：https://go.dev/blog/strings&lt;/p>
&lt;p>译者：z&lt;/p>
&lt;/blockquote>
&lt;h1 id="介绍">介绍&lt;/h1>
&lt;p>&lt;a class="link" href="https://blog.golang.org/slices" target="_blank" rel="noopener"
>前文&lt;/a>介绍了slice如何工作，用一些例子展示了背后实现原理。基于那样的背景下，这篇文章将讨论Go中的strings——字符串。一开始你可能觉得对于一个blog的主题来说字符串太过于简单，但是想要很好地使用它们不仅需要理解它们的工作原理，也要明白byte、character、rune间的区别，unicode和UTF-的区别，字符串和字符串字面值的区别，可能还有其他更细微之处的区别。&lt;/p>
&lt;p>开始这个主题的一个方法是思考这么一个经常被提及的问题：“当我在Go中获取字符串在n位置的东西时，为什么我没有获取到第n个字符？”，正如你所见，这个问题可以让我们思考关于字符串如何工作的更多细节问题。&lt;/p>
&lt;p>一个很棒的，不局限于Go语言的回答是Joel Spolsky的著名blog： &lt;a class="link" href="http://www.joelonsoftware.com/articles/Unicode.html" target="_blank" rel="noopener"
>The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&lt;/a>。这篇文章会重述他的一些观点。&lt;/p>
&lt;h1 id="什么是字符串">什么是字符串&lt;/h1>
&lt;p>让我们从基础开始吧。&lt;/p>
&lt;p>Go中，一个字符串实际上只是只读的byte slice而已。如果你完全不理解什么是byte的slice或者其工作原理，请读之前这篇&lt;a class="link" href="https://blog.golang.org/slices" target="_blank" rel="noopener"
>blog&lt;/a>。这里我们默认你已经读过了。&lt;/p>
&lt;p>首先要声明的很重要的一点是，字符串可以包括任意个数的字节。不一定要包含unicode格式文本、UTF-8格式文本、或其他预定义格式的文本。如果只考虑字符串的内容，它其实就是等同于byte slice。&lt;/p>
&lt;p>这是一个字符串字面值（后面会有更多），它使用&lt;code>\xNN&lt;/code>符号定义一个字符串常量，它会包含各种奇怪的byte（当然，byte范围是从16进制的00到FF，不包括FF）&lt;/p>
&lt;pre>&lt;code>const sample = &amp;quot;\xbd\xb2\x3d\xbc\x20\xe2\x8c\x98&amp;quot;
&lt;/code>&lt;/pre>
&lt;h1 id="打印字符串">打印字符串&lt;/h1>
&lt;p>由于举例的字符串中的一些字节是非ASCII字符，甚至不是UTF-8，直接打印字符串会产生不好看的输出，打印语句如下：&lt;/p>
&lt;pre>&lt;code>fmt.Println(sample)
&lt;/code>&lt;/pre>
&lt;p>会产生这样一堆东西（环境不同显示的东西也不同）&lt;/p>
&lt;pre>&lt;code>��=� ⌘
&lt;/code>&lt;/pre>
&lt;p>为了找出字符串到底包含什么，我们需要把它分开，并单独检验每一块。有一些方法可以做到，最明显的就是遍历他的内容，并把每个字节单独输出，看这个for循环：&lt;/p>
&lt;pre>&lt;code>for i := 0; i &amp;lt; len(sample); i++ {
fmt.Printf(&amp;quot;%x &amp;quot;, sample[i])
}
&lt;/code>&lt;/pre>
&lt;p>如上面展示的，通过索引可以获取到字符串的每个字节，而不是字符。下面我们再细致的看看循环输出的字节：&lt;/p>
&lt;pre>&lt;code>bd b2 3d bc 20 e2 8c 98
&lt;/code>&lt;/pre>
&lt;p>注意一下每个字节是如何和与字符串中定义的16进制值对应的。&lt;/p>
&lt;p>一个更短的产生可观输出的方法是使用fmt的&lt;code>%X&lt;/code>（16进制）格式。它会以16进制输出字符串的字节序列，每个字节是两位：&lt;/p>
&lt;pre>&lt;code>fmt.Printf(&amp;quot;%x\n&amp;quot;, sample)
&lt;/code>&lt;/pre>
&lt;p>它的输出是：&lt;/p>
&lt;pre>&lt;code>bdb23dbc20e28c98
&lt;/code>&lt;/pre>
&lt;p>一个小技巧是在%和x中间添加空格，比较一下区别：&lt;/p>
&lt;pre>&lt;code>fmt.Printf(&amp;quot;% x\n&amp;quot;, sample)
&lt;/code>&lt;/pre>
&lt;p>注意下字节间如何打印空格的：&lt;/p>
&lt;pre>&lt;code>bd b2 3d bc 20 e2 8c 98
&lt;/code>&lt;/pre>
&lt;p>使用&lt;code>%q&lt;/code>可以转义输出无法显示的字节，这样输出就会很清晰：&lt;/p>
&lt;pre>&lt;code>fmt.Printf(&amp;quot;%q\n&amp;quot;, sample)
&lt;/code>&lt;/pre>
&lt;p>当大多数字符串都很正常而有一些包含了特殊符号需要剔除时，这个方法很方便，它会产生：&lt;/p>
&lt;pre>&lt;code>&amp;quot;\xbd\xb2=\xbc ⌘&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>如果我们仔细看它，会发现在乱码中有一个ASCII的等号，还有一个正常的空格，最后有个很著名的“Place of Interest” 符号。这个符号的unicode编码是U+2318，在空格（16进制值是20）后面用UTF-8编码：e2 8c 98.&lt;/p>
&lt;p>如果我们不熟悉或被字符串中的奇怪东西绕晕了，我们可以使用+号结合&lt;code>%q&lt;/code>。这个组合会输出不可打印的字符的转义格式，以及非ASCII字符的转义格式，这些格式都是UTF-8的. 非ASCII数据会以合适的UTF-8编码打印出来：&lt;/p>
&lt;pre>&lt;code>fmt.Printf(&amp;quot;%+q\n&amp;quot;, sample)
&lt;/code>&lt;/pre>
&lt;p>这种格式下，unicode格式的“Place of Interest” 符号会被展示为带&lt;code>\u&lt;/code>转义序列：&lt;/p>
&lt;pre>&lt;code>&amp;quot;\xbd\xb2=\xbc \u2318&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>这种打印的方法非常适合字符串内容的debug，下面讨论的时候也会很方便。值得一提的是，所有这些方法应用在字节slice或字符串中时表现一致。&lt;/p>
&lt;p>这是我们提及的所有打印方法，你可以在浏览器中试试运行：&lt;/p>
&lt;pre>&lt;code>package main
import &amp;quot;fmt&amp;quot;
func main() {
const sample = &amp;quot;\xbd\xb2\x3d\xbc\x20\xe2\x8c\x98&amp;quot;
fmt.Println(&amp;quot;Println:&amp;quot;)
fmt.Println(sample)
fmt.Println(&amp;quot;Byte loop:&amp;quot;)
for i := 0; i &amp;lt; len(sample); i++ {
fmt.Printf(&amp;quot;%x &amp;quot;, sample[i])
}
fmt.Printf(&amp;quot;\n&amp;quot;)
fmt.Println(&amp;quot;Printf with %x:&amp;quot;)
fmt.Printf(&amp;quot;%x\n&amp;quot;, sample)
fmt.Println(&amp;quot;Printf with % x:&amp;quot;)
fmt.Printf(&amp;quot;% x\n&amp;quot;, sample)
fmt.Println(&amp;quot;Printf with %q:&amp;quot;)
fmt.Printf(&amp;quot;%q\n&amp;quot;, sample)
fmt.Println(&amp;quot;Printf with %+q:&amp;quot;)
fmt.Printf(&amp;quot;%+q\n&amp;quot;, sample)
}
&lt;/code>&lt;/pre>
&lt;h1 id="utf-8和字符串字面值">UTF-8和字符串字面值&lt;/h1>
&lt;p>如我们所见，索引一个字符串会获得它的字节，而不是字符，一个字符串只是一串的字节而已。这意味着当我们在字符串中存储一个字符时，我们同时存了它的字节表示。让我们看一个更细致的例子：&lt;/p>
&lt;p>这是一个小程序，它按照三种不同的方式打印了只有一个字符的字符串，一种按照字符串打印，一种只打印ASCII字符，一种按照16进制打印每一个字节。为了避免混淆，我们创建了一个原始字符串，由反引号围起来，这样它就只能包含字面值（如果是普通的字符串，由于被双引号包围，可能会包含上面提到的转义序列）&lt;/p>
&lt;pre>&lt;code>func main() {
const placeOfInterest = `⌘`
fmt.Printf(&amp;quot;plain string: &amp;quot;)
fmt.Printf(&amp;quot;%s&amp;quot;, placeOfInterest)
fmt.Printf(&amp;quot;\n&amp;quot;)
fmt.Printf(&amp;quot;quoted string: &amp;quot;)
fmt.Printf(&amp;quot;%+q&amp;quot;, placeOfInterest)
fmt.Printf(&amp;quot;\n&amp;quot;)
fmt.Printf(&amp;quot;hex bytes: &amp;quot;)
for i := 0; i &amp;lt; len(placeOfInterest); i++ {
fmt.Printf(&amp;quot;%x &amp;quot;, placeOfInterest[i])
}
fmt.Printf(&amp;quot;\n&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;p>输出是：&lt;/p>
&lt;pre>&lt;code>plain string: ⌘
quoted string: &amp;quot;\u2318&amp;quot;
hex bytes: e2 8c 98
&lt;/code>&lt;/pre>
&lt;p>这提醒了我们U+2318是“Place of Interest” 符号 ⌘的unicode编号，并且由字节表示为e2 8c 98，这些字节是16进制数2318按照UTF-8编码后的字节表示。&lt;/p>
&lt;p>依赖于你对UTF-8的熟悉程度，你可能很清楚这些或者有点模糊，但是花点时间解释一下UTF-8是如何表示我们创建的字符串是很有必要的。最简单的事实是：当源码写入时，它就创建出来了。&lt;/p>
&lt;p>源码在Go中被定义为UTF-8文本，并且不允许其他格式的表示。这意味着在源码中，当我们输入：
&lt;code>⌘&lt;/code>
时，文本编辑器会把&lt;code>⌘&lt;/code>符号的UTF-8编码存入源码中，当我们输出16进制字节时，我们只是复制输出了文件中编辑器放入的数据。&lt;/p>
&lt;p>更精简点来说，Go语言源码是UTF-8，所以字符串字面量的源码就是UTF-8文本。如果字符串字面值不包含转义序列（反引号构建的原始字符串不能包含转义字符），构造出来的字符串引号中间的文本就是源码文本。因此原始字符串总是会包含合法的UTF-8文本。类似的，普通字符串经常由合法的UTF-8文本组成，除非它包含上面提到的不在UTF-8编码中的转义序列。&lt;/p>
&lt;blockquote>
&lt;p>译注：&lt;/p>
&lt;p>反引号 `` 组成的字符串不会进行转义处理，所以字符串内容=存入的源码&lt;/p>
&lt;p>普通字符串 &amp;quot;&amp;quot; 会进行转义处理，比如&lt;code>\x2b&lt;/code>会识别成一个16进制数据存入，而不是存入\、x、2、b。如果这个16进制数不在UTF-8编码中，那就是非法的UTF-8编码，无法被打印出来。&lt;/p>
&lt;/blockquote>
&lt;p>一些人认为Go字符串总是UTF-8编码，其实不是：只有字符串字面值是UTF-8编码.正如我们上面提到的，字符串值可以包含任意的字节；字符串字面值只要没有字节等级的转义就总是UTF-8文本。&lt;/p>
&lt;p>总结来说，字符串可以包含任意字节，但是从字面值构建时，这些字节通常都是UTF-8编码的。&lt;/p>
&lt;h1 id="code-points字符runes">Code points、字符、runes&lt;/h1>
&lt;p>目前为止我们都很小心地使用单词“字节”和“字符”。一部分原因是因为字符串包含字节，另一部分是因为字符这个概念有点难以定义。Unicode标准使用“Code point”定义单一值表示的东西，比如Code points U+2318，16进制值2318，代表了⌘符号（更多Code point参考&lt;a class="link" href="http://unicode.org/cldr/utility/character.jsp?a=2318" target="_blank" rel="noopener"
>Unicode page&lt;/a>）&lt;/p>
&lt;p>一个更普通地例子是Unicode Code point U+0061是小写字母：a&lt;/p>
&lt;p>但是小写重音字母à如何表示？这是一个字符，也是Code point U+00E0，但是它有其他表示方法。比如我们可以结合重音Code point，U+0300，附加到小写字母a，U+0061上，构建出同样的字符à。通常来说一个字符可以被多种不同的Code point组合表示，因此有不同的UTF-8字节序列。&lt;/p>
&lt;p>因此计算机的字符概念是模糊的，或者容易混淆，所以我们要小心使用。为了让他更可靠，有一些标准化技术可以保证一个字符只有一种Code point的表示方式，但是这个主题不在我们讨论的范围内，之后会有一个新的blog介绍Go库是如何处理标准化的。&lt;/p>
&lt;p>“Code point”有点绕口，为此在Go中有个更短的术语：rune。这个术语会在库和源码中出现，和Code point意思相同，但有一个新的特点。&lt;/p>
&lt;p>Go语言中rune是类型int32的别名，所以程序可以理解一个int类型的数值表示为Code point的状况。除此以外，一个字符常量在Go中其实被称为一个rune常量。&lt;/p>
&lt;pre>&lt;code>'⌘'
&lt;/code>&lt;/pre>
&lt;p>这个符号的类型是rune，值是整型的0x2318.&lt;/p>
&lt;p>总的来说，这是几个重点：&lt;/p>
&lt;ul>
&lt;li>Go源码总是UTF-8的&lt;/li>
&lt;li>一个字符串可以包含任意字节&lt;/li>
&lt;li>一个字符串字面值如果没有字节层面的转义，那就是合法的UTF-8序列。&lt;/li>
&lt;li>这些序列代表了unicode的Code point，也就是rune。&lt;/li>
&lt;li>无法保证Go中字符串的字符是标准化过的。&lt;/li>
&lt;/ul>
&lt;h1 id="for-range循环">&lt;code>for range&lt;/code>循环&lt;/h1>
&lt;p>除了不言自明的一个细节——go源码是UTF-8编码的，只有在一种情况下，go会特殊处理UTF-8编码，那就是当你对字符串使用&lt;code>for range&lt;/code>循环的时候。&lt;/p>
&lt;p>我们知道普通的&lt;code>for&lt;/code>循环会发生什么，对于&lt;code>for range&lt;/code>循环，每次遍历时都会解码一个UTF-8的rune。每次循环时，下标是当前rune的开始位置，测量单位是字节，code point就是他的值。这个例子使用了另一个打印格式&lt;code>%#U&lt;/code>，可以打印unicode编码和代表的字符：&lt;/p>
&lt;pre>&lt;code>const nihongo = &amp;quot;日本語&amp;quot;
for index, runeValue := range nihongo {
fmt.Printf(&amp;quot;%#U starts at byte position %d\n&amp;quot;, runeValue, index)
}
&lt;/code>&lt;/pre>
&lt;p>输出会显示每个code point占据了多个字节：&lt;/p>
&lt;pre>&lt;code>U+65E5 '日' starts at byte position 0
U+672C '本' starts at byte position 3
U+8A9E '語' starts at byte position 6
&lt;/code>&lt;/pre>
&lt;h1 id="标准库">标准库&lt;/h1>
&lt;p>Go的标准库对解释UTF-8文本提供了强大支持。如果&lt;code>for range&lt;/code>循环对你来说不够用，那么可以试试库里的包。&lt;/p>
&lt;p>最重要的包是&lt;code>unicode/utf8&lt;/code>，提供了UTF-8字符串的验证、拆分、组装方法。这个程序等同于上面的&lt;code>for range&lt;/code>循环，但是使用了&lt;code>DecodeRuneInString&lt;/code>方法实现。返回值是rune和他的UTF-8编码字节个数。&lt;/p>
&lt;pre>&lt;code>const nihongo = &amp;quot;日本語&amp;quot;
for i, w := 0, 0; i &amp;lt; len(nihongo); i += w {
runeValue, width := utf8.DecodeRuneInString(nihongo[i:])
fmt.Printf(&amp;quot;%#U starts at byte position %d\n&amp;quot;, runeValue, i)
w = width
}
&lt;/code>&lt;/pre>
&lt;p>运行可以看到结果相同。&lt;code>for range&lt;/code>循环和&lt;code>DecodeRuneInString &lt;/code>方法会产生相同的迭代结果。&lt;/p>
&lt;p>这个包的其他方法请查看&lt;a class="link" href="https://go.dev/pkg/unicode/utf8/" target="_blank" rel="noopener"
>unicode/utf8文档&lt;/a>&lt;/p>
&lt;h1 id="结论">结论&lt;/h1>
&lt;p>回答一下文章开始提出的问题：字符串由字节组成，因此索引字符串会获得字节，而不是字符。一个字符串甚至可能不包含字符。实际上“字符”的定义就是模糊的，如果你把字符串定义为由字符组成，你可能会遇到一些模糊性问题。&lt;/p>
&lt;p>还有很多关于unicode，UTF-8和多语言文本处理的东西可以讲，但是请等下一个blog吧，现在我希望你更理解Go的字符串如何呈现的了，即使它们可能包含任意的字节，它的核心设计的一部分仍旧是UTF-8编码.&lt;/p></description></item><item><title>使用Cloudflare Tunnel实现本地服务暴露</title><link>https://chajiuqqq.github.io/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/</link><pubDate>Sat, 01 Oct 2022 13:31:05 +0800</pubDate><guid>https://chajiuqqq.github.io/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/</guid><description>&lt;p>Cloudflare Tunnel可以实现通过域名访问本地暴露的服务功能，类似frp做的隧道，但是不用自己搭建服务端，只要配置好客户端即可。&lt;a class="link" href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/" target="_blank" rel="noopener"
>doc link&lt;/a>&lt;/p>
&lt;p>下面说一下配置方式。&lt;/p>
&lt;h1 id="1dashboard创建tunnel">1、Dashboard创建tunnel&lt;/h1>
&lt;p>首先给出官方教程，熟悉英文的可以直接看 &lt;a class="link" href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/remote/#1-create-a-tunnel" target="_blank" rel="noopener"
>link&lt;/a>&lt;/p>
&lt;p>去到 &lt;a class="link" href="https://dash.teams.cloudflare.com/" target="_blank" rel="noopener"
>Zero Trust dashboard&lt;/a>，在Access &amp;gt; Tunnels创建tunnel。&lt;/p>
&lt;ol>
&lt;li>先取个名字&lt;/li>
&lt;li>public hostname 里添加自定义subdomain，domain选择在cloudflare绑定过的域名。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果cloudflare没有创建过website，在&lt;a class="link" href="https://developers.cloudflare.com/fundamentals/get-started/setup/add-site/" target="_blank" rel="noopener"
>这里&lt;/a>创建。需要自行申请一个域名，推荐&lt;a class="link" href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener"
>freenom&lt;/a>，然后修改域名nameserver为cloudflare的，这样这个域名就可以由cloudflare管理了。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/Public-Hostname-setting.png"
width="1084"
height="551"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/Public-Hostname-setting_hu4a20066970291721232917880ba3e00e_33635_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/Public-Hostname-setting_hu4a20066970291721232917880ba3e00e_33635_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Public-Hostname-setting"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/p>
&lt;ol start="3">
&lt;li>service选择你要的服务，一般是http，然后地址一般是写127.0.0.1+本地服务端口号，如&lt;code>127.0.0.1:5000&lt;/code>。保存后这个website自动添加dns解析到你的本地机器。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>这里不再需要去域名dns处手动添加了，他自动添加好了&lt;/p>
&lt;/blockquote>
&lt;h1 id="2运行cloudflared客户端">2、运行cloudflared客户端&lt;/h1>
&lt;p>我使用的是群晖nas+docker版，主要是图形化的docker怎么运行cloudflared。&lt;/p>
&lt;ol>
&lt;li>下载docker套件
&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/docker1.png"
width="988"
height="568"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/docker1_hu3058fc238dddf7c434e62d2f7d791943_44011_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/docker1_hu3058fc238dddf7c434e62d2f7d791943_44011_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="docker"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="417px"
>&lt;/li>
&lt;li>在注册表里搜索cloudflared并下载&lt;/li>
&lt;li>开启容器，需要配置两个地方
&lt;ul>
&lt;li>环境变量添加&lt;code>TUNNEL_TRANSPORT_PROTOCOL&lt;/code>，值为&lt;code>http2&lt;/code>，因为默认的quic协议国内不支持，需要改成http2&lt;/li>
&lt;li>下方命令输入创建tunnel时docker下的提示部分，如&lt;code>docker run cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiZjYyMDUyMjxxxxx&lt;/code>你就复制&lt;code>tunnel --no-autoupdate run --token eyJhIjoiZjYyMDUyMjxxxxx&lt;/code>进去&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://dash.teams.cloudflare.com/" target="_blank" rel="noopener"
>Zero Trust dashboard&lt;/a>的tunnel里看到active就说明连上了&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/tunnels.png"
width="1562"
height="344"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/tunnels_hu78e136ca2f87245cb30a4fe2dac75327_21867_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/%E4%BD%BF%E7%94%A8cloudflare-tunnel%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%9A%B4%E9%9C%B2/tunnels_hu78e136ca2f87245cb30a4fe2dac75327_21867_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="tunnel"
class="gallery-image"
data-flex-grow="454"
data-flex-basis="1089px"
>&lt;/p>
&lt;h1 id="3访问subdomin就会代理到你本地的服务">3、访问subdomin就会代理到你本地的服务&lt;/h1>
&lt;p>如我的nas域名设置了&lt;code>https://nas.ipppz.tk/&lt;/code>，并转发到nas的5000端口，接下来就直接用域名访问即可，也是支持https的。&lt;/p></description></item><item><title>Hugo + GitPages博客搭建指南</title><link>https://chajiuqqq.github.io/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</link><pubDate>Wed, 24 Aug 2022 16:32:10 +0800</pubDate><guid>https://chajiuqqq.github.io/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</guid><description>&lt;p>应该算是第一篇比较正式的blog吧，前几天把bolg搭起来了，今天又实现了持续集成，可以实现一个仓库保存blogs和网站页面，并在更新的时候自动构建+部署网站。这种构建方式最大的好处是免费+资料掌握+自动部署，那下面就来介绍一下怎么实现。&lt;/p>
&lt;h2 id="使用流程">使用流程&lt;/h2>
&lt;p>在多台设备上可clone一个仓库，使用hugo或手动在content/post下新建md文件攥写文章，完成后git提交并推送远程仓库，远程仓库会自动构建网站，用户等一会就可以看到网站更新了。&lt;/p>
&lt;p>编写环境只要有git即可完成编写+部署流程（当然添加了hugo在创建文章时会更方便啦，而且可以本地看到效果）。&lt;/p>
&lt;h2 id="搭建逻辑">搭建逻辑&lt;/h2>
&lt;p>博客可以是静态的，也可以是动态的。静态的就是一堆由HTML和CSS、JS组成的文件直接被浏览器访问，没有后台程序提供业务支持，好处是不吃资源，访问只受网络带宽限制，坏处是没法做业务处理了；&lt;/p>
&lt;p>动态指的是由前端+后端组合支持的网站，好处是可以做自由的业务和管理，坏处是部署麻烦，对资源需求大，并发访问受到服务器性能限制。&lt;/p>
&lt;p>为了便于维护，本文搭建的是静态网站。&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/site.png"
width="1920"
height="956"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/site_hu09785a97a006931e2c73fa78e466fe9e_1043218_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/site_hu09785a97a006931e2c73fa78e466fe9e_1043218_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="网站首页"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="482px"
>&lt;/p>
&lt;p>采用技术是&lt;/p>
&lt;ul>
&lt;li>Markdown：文章编写语法&lt;/li>
&lt;li>Hugo：静态网站编译工具&lt;/li>
&lt;li>GitHub Page：网页托管&lt;/li>
&lt;li>GitHub Action：自动构建服务&lt;/li>
&lt;/ul>
&lt;p>Hugo的使用逻辑是，我们编写markdown格式文章，并附加某种格式的数据，写好后交给Hugo工具“构建”生成静态的HTML和CSS、JS组成的文件，这些文件统一放在public文件夹下，此时部署public就可以看到你的网站了。&lt;/p>
&lt;p>其中一个缺点是每次需要Hugo的环境来“构建”，并需要维护两套代码：文章源代码和网站代码&lt;/p>
&lt;p>当结合Github Action时，可以把这个构建过程交给云端处理。每次主分支推送时都会触发这个“构建”，同时把public下的文件推送到&lt;code>gh-page&lt;/code>分支，利用Github Page挂载你的网站，这样网站就更新好并可以浏览了。&lt;/p>
&lt;h2 id="搭建步骤">搭建步骤&lt;/h2>
&lt;h3 id="1安装hugo">1、安装hugo&lt;/h3>
&lt;p>Hugo没有一键安装包，可以使用包管理工具安装，&lt;a class="link" href="https://gohugo.io/getting-started/quick-start/#step-1-install-hugo" target="_blank" rel="noopener"
>MacOS用brew&lt;/a>，Windows用&lt;a class="link" href="https://chocolatey.org/" target="_blank" rel="noopener"
>chocolatey&lt;/a>。各个系统安装&lt;a class="link" href="https://gohugo.io/getting-started/installing" target="_blank" rel="noopener"
>看这&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">MacOS:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install hugo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">choco install hugo -confirm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完成后使用&lt;code>hugo new site quickstart&lt;/code>创建&lt;code>quickstart&lt;/code>文件夹作为网站主目录。&lt;/p>
&lt;p>进入目录，使用&lt;code>hugo new posts/my-first-post.md&lt;/code>创建一个新的文章。然后把&lt;code>draft: true&lt;/code>删除或者改为&lt;code>draft: false&lt;/code>，这样就公开文章咯。&lt;/p>
&lt;p>使用&lt;code>hugo server&lt;/code>可以在本地部署网站，访问 http://localhost:1313/ 就可以看到网站咯！&lt;/p>
&lt;p>更多Hugo使用教程参考&lt;a class="link" href="https://gohugo.io/getting-started/quick-start/" target="_blank" rel="noopener"
>这个&lt;/a>。&lt;/p>
&lt;h3 id="2添加github-action">2、添加Github Action&lt;/h3>
&lt;p>官方文档里有&lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action" target="_blank" rel="noopener"
>说明&lt;/a>,这里概述一下：&lt;/p>
&lt;ol>
&lt;li>在你的项目下创建&lt;code>.github/workflows/gh-pages.yml&lt;/code>这个路径的文件&lt;/li>
&lt;li>复制这一段进去,注意下面两个&lt;code>main&lt;/code>的地方，如果你用&lt;code>master&lt;/code>，则改成&lt;code>master&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">name: github pages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - main # Set a branch to deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pull_request:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-20.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> submodules: true # Fetch Hugo themes (true OR recursive)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup Hugo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: peaceiris/actions-hugo@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hugo-version: &amp;#39;latest&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # extended: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: hugo --minify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: peaceiris/actions-gh-pages@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if: github.ref == &amp;#39;refs/heads/main&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> github_token: ${{ secrets.GITHUB_TOKEN }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> publish_dir: ./public
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3添加仓库">3、添加仓库&lt;/h3>
&lt;p>初始化好网站后，使用git初始化仓库，并提交。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;init&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在github上创建新仓库，这个仓库名称可以是&lt;code>用户名.github.io&lt;/code>，或者别的。最后访问地址是&lt;code>用户名.github.io&lt;/code>或者&lt;code>用户名.github.io/仓库名&lt;/code>.不需要readme。然后本地仓库添加远程仓库，并推送。&lt;/p>
&lt;p>推送成功后，Action会自动build网站并推送到&lt;code>gh-pages&lt;/code>分支。&lt;strong>因此我们使用一个仓库的不同分支来管理文章源代码和网站代码。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/actions.png"
width="1195"
height="598"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/actions_hu9895419489f656548e8439ae60fcd50a_57435_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/actions_hu9895419489f656548e8439ae60fcd50a_57435_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="actions的任务"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;h3 id="3设置github-page">3、设置GitHub Page&lt;/h3>
&lt;p>在项目设置里选择Pages，初次构建需要指定哪个分支的代码用作Page，选择&lt;code>gh-pages&lt;/code>分支并保存即可，上方会给出可以访问的地址。我的仓库名称是blogs，因此地址是 &lt;a class="link" href="https://chajiuqqq.github.io/blogs/" target="_blank" rel="noopener"
>https://chajiuqqq.github.io/blogs/&lt;/a> ，试试访问你的网站，应该可以看到第一篇文章咯。&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/pages.png"
width="1412"
height="584"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/pages_hu35e357df209da35323a2b06f1e97eb4b_69984_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/pages_hu35e357df209da35323a2b06f1e97eb4b_69984_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pages"
class="gallery-image"
data-flex-grow="241"
data-flex-basis="580px"
>&lt;/p>
&lt;p>&lt;strong>如果看得到网站，但是文章点不进去，请修改config.yaml，将&lt;code>baseurl&lt;/code>换成你的网站地址即可！这是线上部署网站必要的步骤！&lt;/strong>&lt;/p>
&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">baseurl: https://chajiuqqq.github.io/blogs/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果没有config.yaml咋办？把原来的config.xxx删了，自己创建config.yaml即可！hugo会识别到这个配置文件哦！&lt;/p>
&lt;h3 id="5再发布一篇新文章">5、再发布一篇新文章&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>进入网站目录，新建文章&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hugo new posts/second-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在vscode或其他markdown编辑器中编写文章，记得把draft取消哦&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git提交并推送&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等待网站自动构建&lt;/p>
&lt;/li>
&lt;li>
&lt;p>访问网站&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>是不是很方便呢&lt;/p>
&lt;h2 id="最后">最后&lt;/h2>
&lt;p>hugo提供了很多好看的&lt;a class="link" href="https://themes.gohugo.io/" target="_blank" rel="noopener"
>主题&lt;/a>，参考主题指南进行更换哦，比如我使用的&lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack" target="_blank" rel="noopener"
>hugo-theme-stack&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/site.png"
width="1920"
height="956"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/site_hu09785a97a006931e2c73fa78e466fe9e_1043218_480x0_resize_box_3.png 480w, https://chajiuqqq.github.io/blogs/blogs/p/hugo--gitpages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/site_hu09785a97a006931e2c73fa78e466fe9e_1043218_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="site"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="482px"
>&lt;/p>
&lt;p>配置方法就是在网站目录下添加这个库&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-v" data-lang="v">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">git&lt;/span> &lt;span class="nv">submodule&lt;/span> &lt;span class="nv">add&lt;/span> &lt;span class="nv">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>并修改&lt;code>config.yaml&lt;/code>，这个可以直接复制&lt;code>hugo-theme-stack&lt;/code>下&lt;code>examplesite&lt;/code>的&lt;code>config.yaml&lt;/code>再修改哦。最主要的就是&lt;code>baseurl&lt;/code>换成你的网站地址即可！下面贴上我的配置.&lt;/p>
&lt;blockquote>
&lt;p>The End&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="n">baseurl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">chajiuqqq&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">blogs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">languageCode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">en&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">theme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hugo&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">theme&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">paginate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">茶酒的小站&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">languages&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">en&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">languageName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">English&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Chajiu&lt;/span>&lt;span class="s1">&amp;#39;s blog
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> weight: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> zh-cn:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> languageName: 中文
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> title: 茶酒的小站
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> weight: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> ar:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> languageName: عربي
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> languagedirection: rtl
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> title: موقع تجريبي
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> weight: 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"># Change it to your Disqus shortname before using
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">disqusShortname: hugo-theme-stack
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"># GA Tracking ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">googleAnalytics:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"># Theme i18n support
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"># Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">DefaultContentLanguage: zh-cn
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"># Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"># This will make .Summary and .WordCount behave correctly for CJK languages.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">hasCJKLanguage: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">permalinks:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> post: /p/:slug/
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> page: /:slug/
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> mainSections:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - post
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> featuredImageField: image
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> rssFullContent: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> favicon:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> footer:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> since: 2020
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> customText:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> dateFormat:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> published: Jan 02, 2006
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> lastUpdated: Jan 02, 2006 15:04 MST
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> sidebar:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> emoji: 🍥
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> subtitle: 一个年轻的小站
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> avatar:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> enabled: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> local: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> src: img/avatar.jpeg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> article:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> math: false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> toc: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> readingTime: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> license:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> enabled: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> default: Licensed under CC BY-NC-SA 4.0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> comments:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> enabled: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> provider: disqus
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> disqusjs:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> shortname:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> apiUrl:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> apiKey:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> admin:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> adminLabel:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> utterances:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> repo:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> issueTerm: pathname
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> label:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> remark42:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> host:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> site:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> locale:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> vssue:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> platform:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> owner:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> repo:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> clientId:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> clientSecret:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> autoCreateIssue: false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> # Waline client configuration see: https://waline.js.org/en/reference/component.html
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> waline:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> serverURL:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> lang:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> pageview:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> emoji:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - https://unpkg.com/@waline/emojis@1.0.1/weibo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> requiredMeta:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - name
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - email
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - url
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> locale:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> admin: Admin
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> placeholder:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> twikoo:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> envId:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> region:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> path:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> lang:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> # See https://cactus.chat/docs/reference/web-client/#configuration for description of the various options
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> cactus:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> defaultHomeserverUrl: &amp;#34;https://matrix.cactus.chat:8448&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> serverName: &amp;#34;cactus.chat&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> siteName: &amp;#34;&amp;#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> giscus:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> repo:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> repoID:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> category:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> categoryID:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> mapping:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> lightTheme:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> darkTheme:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> reactionsEnabled: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> emitMetadata: 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> gitalk:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> owner:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> admin:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> repo:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> clientID:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> clientSecret:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> cusdis:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> host:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> id:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> widgets:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> homepage:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - type: search
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - type: archives
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> limit: 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - type: categories
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> limit: 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - type: tag-cloud
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> limit: 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> page:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - type: toc
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> opengraph:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> twitter:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> # Your Twitter username
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> site:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> # Available values: summary, summary_large_image
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> card: summary_large_image
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> defaultImage:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> opengraph:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> enabled: false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> local: false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> src:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> colorScheme:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> # Display toggle
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> toggle: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> # Available values: auto, light, dark
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> default: auto
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> imageProcessing:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> cover:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> enabled: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> content:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> enabled: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">### Custom menu
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">### See https://docs.stack.jimmycai.com/configuration/custom-menu.html
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">menu:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> main: []
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> social:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - identifier: github
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> name: GitHub
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> url: https://github.com/chajiuqqq
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> icon: brand-github
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - identifier: twitter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> name: Twitter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> url: https://twitter.com
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> icon: brand-twitter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">related:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> includeNewer: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> threshold: 60
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> toLower: false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> indices:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - name: tags
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> weight: 100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> - name: categories
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> weight: 200
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">markup:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> goldmark:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> renderer:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> ## Set to true if you have HTML content inside Markdown
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> unsafe: false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> tableOfContents:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> endLevel: 4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> ordered: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> startLevel: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> highlight:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> noClasses: false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> codeFences: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> guessSyntax: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> lineNoStart: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> lineNos: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> lineNumbersInTable: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> tabWidth: 4
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Say Hello</title><link>https://chajiuqqq.github.io/blogs/p/say-hello/</link><pubDate>Thu, 18 Aug 2022 15:20:49 +0800</pubDate><guid>https://chajiuqqq.github.io/blogs/p/say-hello/</guid><description>&lt;img src="https://chajiuqqq.github.io/blogs/p/say-hello/butterfly-7353884_1920.jpeg" alt="Featured image of post Say Hello" />&lt;h1 id="正文">正文&lt;/h1>
&lt;p>你好，测试&lt;/p>
&lt;p>这是2朵美丽的花：&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/hd-wallpaper-729509_1920.jpeg"
width="1920"
height="1276"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/hd-wallpaper-729509_1920_hu1ea7706b7fdfa16a77a7c4890333d61b_217312_480x0_resize_q75_box.jpeg 480w, https://chajiuqqq.github.io/blogs/blogs/p/say-hello/hd-wallpaper-729509_1920_hu1ea7706b7fdfa16a77a7c4890333d61b_217312_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="花"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
> &lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/pink-324175_1920.jpeg"
width="1920"
height="1280"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/pink-324175_1920_hu4e15e464a1e9f3ac1cfdc3bdb94f6e91_247638_480x0_resize_q75_box.jpeg 480w, https://chajiuqqq.github.io/blogs/blogs/p/say-hello/pink-324175_1920_hu4e15e464a1e9f3ac1cfdc3bdb94f6e91_247638_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="樱花"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>竖排：&lt;/p>
&lt;p>&lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/flower-7383308_1920.jpeg"
width="1280"
height="1920"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/flower-7383308_1920_hub463be3c8ad1426b92fad2c544b4c6fb_189157_480x0_resize_q75_box.jpeg 480w, https://chajiuqqq.github.io/blogs/blogs/p/say-hello/flower-7383308_1920_hub463be3c8ad1426b92fad2c544b4c6fb_189157_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="荷花"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
> &lt;img src="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/cat-2083492_1920.jpeg"
width="1920"
height="1171"
srcset="https://chajiuqqq.github.io/blogs/blogs/p/say-hello/cat-2083492_1920_hu7a831542b4a972124b3df6473c37debd_414826_480x0_resize_q75_box.jpeg 480w, https://chajiuqqq.github.io/blogs/blogs/p/say-hello/cat-2083492_1920_hu7a831542b4a972124b3df6473c37debd_414826_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="猫"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/p>
&lt;h1 id="第二段">第二段&lt;/h1>
&lt;p>会议&lt;/p></description></item></channel></rss>